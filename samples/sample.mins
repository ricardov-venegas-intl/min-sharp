// This is a work in progress sample

using System;
import amazon.DynamoDb; // External services + repositorues

namespace EvilCatSociety.BlogService {
   // Data Structs as a first class citizens
   public datastruct Article {
      DateTime date;
      String Title
      String? Content;  // Nullables are explicit
      Boolean Published;
      Number NumberOfWords;
   }

   public interface IFeedEngine
   {
      async function void Post(Article article) ;
      async function IEnumerable<Article> ListAllArticles();
      async function IEnumerable<Article> ListPublishedArticles();
      async function Article RemoveArticle(Number index);
   }

   /// <summary>
   /// Feed engine module implements IFeedEngine
   /// </summary>
   public module FeedEngine: IFeedEngine 
   {
      using IDynamodDB dynamodb; // Automatic IoC
      using WordCounter wordCounter;

      IFeedEngine.Post = async (Article article) => // modules only receive Data structures in calls
      {
         if (article.Content != null)
         {
            article.NumberOfWord = wordCounter.countWords(article.Content);
         }
         await dynamodb.save<Article>();
      }

      IFeedEngine.ListAllArticles = () => try db.ReadAll<Article>();

      IFeedEngine.ListPublishedArticles = () =>
      {
         return await try { db.ReadAll().Where(=> $.Published == true); }
                     else {
                           return Array<Article>(1){  // Arrays are just generics
                                                   {Date = DateTime.Now, 
                                                      Title ="Evil Cat 3000"
                                                      Content = "",
                                                      NumberOfWords =0,
                                                      Published = false
                                                      }};
                           }
      }

      IFeedEngine.RemoveArticle = (Number index) =>
       {
          await db.Delete(index);
       }

       // private function
      const function p = () => DateTime.Now.Ticks;

      // Virtual function
      async function clearArticles =  ()=> db.clear(); 
   }

   private class WordCounter
   {
      function CountWords =  (String s) => s.Chars.Sum( => $ == " ");      
   }
}