Language Ideas
   * Minimize Constructs
   * Modules are isolated, stateless and public 
      * Improves Single Responsability principle.
      * Only serilizable types are allowed in the interface
   * State is mantained ina DB style Module
   * Interfaces have inheritance, implementations don't.
      * Liskov Substitution principle
    * Variables and parameter can only be interfaces
      * Liskov Substitution principle.
      * Dependency inversion principle
   * Only the system library are available, everything else is a module.

Things to define

    * Can we skip type inferance?
    * module VS interface implemenation
    * Import Modules
    * Export Modules

Constrains

Example

using System;
using Microsoft.Azure.BlobStore = "https://blobstore.azure.microsoft";

namespace MinSharp.Example.CrudService
{

   public interface IImageStore
   {
      async IArray<Byte> ReadImage(IGuid imageId);
      async void WriteImage(IGuid imageId, IArray<Byte> image);
      async void DeleteImage(IGuid imageId);
   }

   public class ImplImageStore: IImageStore
   {
      using IAzureBlogStorage blobStorage;

      ImageStore.ReadImage = async IArray<Byte>(Guid imageId) => {
         return await blobStorage.Read(imageId);
      }

      ImageStore.WriteImage = async void(IGuid imageId, IArray<Byte> image) =>{
         await blobStorage.Store(imageId, image);
      }

      ImageStore.DeleteImage = async void(IGuid imageId) => {
         nowait blobStorage.Remove(imageId);
      }
      
   }

   export IImageStore = new ImplImageStore();
   import AzureBlogStorage = Configuration('AzureBlob').ServiceBindingFromConfiguration();


   public class TestsImplImageStore: Test
   {
      using ISystemFactory systemFactory;
      class ImplMockAzureBlogStorage:AzureBlogStorage
      {
         IDictionary<IGuid,IArray<Byte>> inMemoryDB = systemFactory.New<Dictionary<Guid,IArray<Byte>>>();

         AzureBlogStorage.Read = async Array<Byte>(IGuid imageId){
            return inMemoryDB[imageId];
         }

         AzureBlogStorage.Store = void(Guid imageId, Array<Byte> image) {
            inMemoryDB[imageId] = image;
         }

         AzureBlogStorage.Remove = void(Guid imageId) {
            inMemoryDB.Remove(imageId);
         }
      }


      Test.RunTest = ()=>{
         using IType<Guid> guidType;
         using AzureBlogStorage = ImplMockAzureBlogStorage;
         using ImageStore imageStore;

         IArray<Byte> sample = [1,2,4]
         Guid id = guidType.NewGuid(); 

         imageStore.WriteImage(id,Sample);
         IArray<Byte> result = imageStore.ReadImage(id,Sample); 

      }
   }
}

