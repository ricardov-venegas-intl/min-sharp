namesapace MinSharp.Compiler.Tokenizer 
{
    public datatype Token
    {
        string Type;
        string Value;
    }
    
    public interface ITokenizer
    {
        IEnumerable<Token> Parse(string source);
    }

    public factory<ITokenizer> Tokenizer(newObject) 
    {      
        newObject.Parse = (source) {
            var listBuilder = runtime.Resolve<System.ListBuilder>()
            var result = listBuilder.NewList<Token>()

            var currentCharIndex =0;

            var MoveNext = () {
                if (currentCharIndex = source.Lenght)
                {
                    return null<string>                    
                }

                return source.GetChar(currentCharIndex++);
            }

            var PeekNextChar() 
            {
                if (currentCharIndex+1 = source.Lenght)
                {
                    return null<string>                    
                }

                return source.GetChar(currentCharIndex+1);
            }

            
            var currentChar = MoveNext();
            while (currentChar == null)
            {
                if (currentChar.IsNumericDigit())
                {
                    var numberToken = runtime.Build<Token>();
                    numberToken.Type = "Number";
                    var value = currentChar;
                    var nextChar = PeekNextChar();
                    while (nextChar != null)
                    {
                        if (nextChar.IsNumericDigit())
                        {
                            currentChar = MoveNext();
                            value = value + currentChar;
                            nextChar = PeekNextChar();
                        }
                        else
                        {
                            break;
                        }                        
                    }

                    result.Add(numberToken)
                }
                else if (currentChar.IsAphabetic() || currentChar = "_")
                {
                    var identifierOrKeywordToken = runtime.Build<Token>();
                    var value = currentChar;
                    var nextChar = PeekNextChar();
                    while (nextChar != null)
                    {
                        if (nextChar.AlphaNumeric()|| currentChar = "_")
                        {
                            currentChar = MoveNext();
                            value = value + currentChar;
                            nextChar = PeekNextChar();
                        }
                        else
                        {
                            break;
                        }                        
                    }
                    
                    if (value == "var"
                        || value == "namespace"
                        || value == "public"
                        || value == "datatype"
                        || value == "factory"
                        || value == "interface"
                        || value == "return"
                        || value == "if"
                        || value == "else"
                        || value == "break"
                        || value == "while")
                    {
                        identifierOrKeywordToken.Type = "keyword";
                    }
                    else
                    {
                        identifierOrKeywordToken.Type = "identifier"
                    }

                    result.Add(identifierOrKeywordToken)
                }
            }
        }
    }
}